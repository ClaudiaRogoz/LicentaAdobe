// =================================================================================================
// Copyright 2014 Adobe Systems Incorporated
// All Rights Reserved.
//
// NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance with the terms
// of the Adobe license agreement accompanying it.
// =================================================================================================

#if AdobePrivate
// =================================================================================================
// Change history
// ==============
//
// Writers:
//  ADC	Amandeep Chawla
//
// mm/dd/yy who Description of changes, most recent on top.
//
// 02-25-14 ADC 1.0-m010 Porting XMPCompareAndMerge to Mac Environment.
// 02-13-14 ADC 5.5-c031 Refactoring XMPCore, implementing few APIs and fixing issues.
// 02-09-14 ADC 1.0-m003 Re-factoring of XMPCommon Framework
// 01-30-14 ADC 1.0-m001 First version
//
// =================================================================================================
#endif // AdobePrivate

#include "XMPCommon/Interfaces/IUTF8String.h"

namespace NS_XMPCOMMON {

	spIUTF8String IUTF8String_v1::append( const char * buff ) {
		pIError_latest err( NULL );
		pIUTF8String_latest ptr = this->append( buff, err );
		if ( err ) {
			throw NS_XMPCOMMON::CreateUncheckedSharedPointer( err );
		}
		return NS_XMPCOMMON::CreateSharedPointer< IUTF8String_latest, IUTF8String_base >( ptr );
	}

	spIUTF8String IUTF8String_v1::append( const spIUTF8String & sPtr ) {
		pIError_latest err( NULL );
		pIUTF8String_latest ptr = this->append( sPtr.get(), err );
		if ( err ) {
			throw NS_XMPCOMMON::CreateUncheckedSharedPointer( err );
		}
		return NS_XMPCOMMON::CreateSharedPointer< IUTF8String_latest, IUTF8String_base >( ptr );
	}

	spIUTF8String IUTF8String_v1::assign( const char * buff) {
		pIError_latest err( NULL );
		pIUTF8String_latest ptr = this->assign( buff, err );
		if ( err ) {
			throw NS_XMPCOMMON::CreateUncheckedSharedPointer( err );
		}
		return NS_XMPCOMMON::CreateSharedPointer< IUTF8String_latest, IUTF8String_base >( ptr );
	}

	spIUTF8String IUTF8String_v1::assign( const spIUTF8String & sPtr) {
		pIError_latest err( NULL );
		pIUTF8String_latest ptr = this->assign( sPtr.get(), err );
		if ( err ) {
			throw NS_XMPCOMMON::CreateUncheckedSharedPointer( err );
		}
		return NS_XMPCOMMON::CreateSharedPointer< IUTF8String_latest, IUTF8String_base >( ptr );
	}

}

